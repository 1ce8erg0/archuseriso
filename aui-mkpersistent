#!/bin/bash

set -e -u

_usage () {
        echo
        echo 'aui-mkpersistent, Live USB creation tool featuring persistent storage.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkpersistent <usb device> <iso image> [options]'
        echo
        echo 'To get help run:'
        echo 'aui-mkpersistent --help'
        exit $1
}

_help () {
        echo
        echo 'Archuseriso tool for creating a Live USB with persistent storage'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkpersistent <usb device> <iso image> [options]'
        echo
        echo 'Options:'
        echo '-h, --help           command help'
        echo '--encrypt            encrypt persistent partition'
        echo
        echo 'Example:'
        echo 'aui-mkpersistent /dev/sdc archuseriso-xfce-1130-x64.iso --encrypt'
        echo
        exit $1
}

_encrypt_mkluks () {
        echo
        echo 'Setting up encrypted partition, type in a passphrase of your choice...'
        if ! cryptsetup --label "${cryptlabel:=AUICRYPT}" --uuid "${cryptuuid:=$(uuidgen)}" -q luksFormat "${usbdevice}3"; then
               echo 'Encryption setup failed, exiting!'
               exit 1
        fi
        echo
        echo 'LUKS encryption setup done! type in your passphrase to unlock device...'
        if ! cryptsetup open "${usbdevice}3" auicrypt; then
               echo 'Error: Could not unlock device! Exiting.'
               exit 1
        fi
        cowdevice=/dev/mapper/auicrypt
}

_encrypt_setup () {
        echo 'Setting up encryption...'
        mkdir "${WD}/${workdir}/"{overlay,squashfs}
        mount "${WD}/${workdir}/iso/${install_dir}/x86_64/airootfs.sfs" "${WD}/${workdir}/squashfs" -o ro
        mkdir "${WD}/${workdir}/usb3/persistent_${iso_label}/x86_64/workdir"
        mount -t overlay airootper -o lowerdir="${WD}/${workdir}/squashfs",upperdir="${WD}/${workdir}/usb3/persistent_${iso_label}/x86_64/upperdir",workdir="${WD}/${workdir}/usb3/persistent_${iso_label}/x86_64/workdir" "${WD}/${workdir}/overlay"
        mount "${WD}/${workdir}/usb2" "${WD}/${workdir}/overlay/boot" -o bind
        cp "${WD}/${workdir}/iso/aui/mkinitcpio-archiso-encryption.conf" "${WD}/${workdir}/overlay/etc/"
        ln -sf mkinitcpio-archiso-encryption.conf "${WD}/${workdir}/overlay/etc/mkinitcpio.conf"
        arch-chroot "${WD}/${workdir}/overlay" mkinitcpio -P
        sed -i "s|Storage$|& Encrypted|
                s|overlay|cryptdevice=UUID=${cryptuuid}:auicrypt &|" \
                "${WD}/${workdir}/overlay/boot/loader/entries/0aui_persistence-x86_64.conf"
        umount "${WD}/${workdir}/overlay/boot" "${WD}/${workdir}/overlay" "/${WD}/${workdir}/squashfs"
        sleep 1
        rmdir "${WD}/${workdir}/overlay" "/${WD}/${workdir}/squashfs"
}

_checks () {
        if [[ $# -ne 2 ]]; then
               echo 'Error: Invalid arguments!'
               _usage 1
        fi
        if [[ ${EUID} -ne 0 ]]; then
               echo 'This script must be run as root!'
               exit 1
        fi
        if [[ ! $(stat -c %t "$1" 2> /dev/null) -eq 8 ]]; then
               echo "Error: $1 is not a block device!"
               _usage 1
        fi
        if [[ ! $(lsblk -dnro rm "$1" 2> /dev/null) -eq 1 ]]; then
                echo "Error: $1 is not a removable block device!"
                _usage 1
        fi
        if [[ ! "$(lsblk -dnro tran "$1" 2> /dev/null)" == 'usb' ]]; then
                echo "Error: $1 is not a usb device!"
                _usage 1
        fi
        if grep -q "$1" /proc/mounts; then
                echo "Error: $1 appears in active mounts, unmount device before proceeding!"
                exit 1
        fi
        if [[ ! -f "$2" ]]; then
               echo "file $2 not found!"
               _usage 1
        fi
        if [[ ! $(file "$2" 2> /dev/null) =~ 'MBR boot sector' ]]; then
                echo "Error: $2 is not an iso image!"
                _usage 1
        fi

        usbdevice=$1
        isoname=$2
}

_init () {
        devicesize=$(blockdev --getsize64 "${usbdevice}")
        ESPSIZE=786432 # 384 MiB
        isosize=$(stat -c %s "${isoname}")
        MINFREESPACE=1073741824 # 1 GiB
        WD="${PWD}"
        workdir=auiwork
        # Check usb device capacity
        if [[ ! ${devicesize} -gt $(( isosize + MINFREESPACE )) ]]; then
               echo 'Storage capacity error!'
               exit 1
        fi
}

_confirm_write () {
        # Confim write
        read -r -n1 -p "Confirm write to $(lsblk -dnro model,size ${usbdevice}) (N/y)? "
        echo
        if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
               echo 'Operation canceled by user!'
               exit 0
        fi

        # Check & prepare working directory
        for mountpoint in "${workdir}" "${workdir}/"{iso,overlay,squashfs} "${workdir}/usb"{2,3}; do
                if grep -q "${mountpoint}" /proc/mounts; then
                       echo "Error: ${mountpoint} appears in active mounts, unmount before proceeding!"
                       exit 1
                fi
        done
        for mountpoint in "${workdir}" "${workdir}/"{iso,overlay,squashfs} "${workdir}/usb"{2,3}; do
                if [[ -e "${WD}/${mountpoint}" ]]; then
                        echo "Error: ${mountpoint} exists in working directory! Delete or rename before proceeding!"
                        exit 1
                fi                    
        done
        if [[ -e /dev/mapper/auicrypt ]]; then
                echo 'Error: cryptsetup mapping /dev/mapper/auicrypt exists! cannot proceed.'
                exit 1
        fi
        mkdir -p "${WD}/${workdir}/iso" "${WD}/${workdir}/usb"{2,3}
}

_iso_copy () {
        # Mount iso
        echo 'Mounting iso...'
        mount "${isoname}" "${WD}/${workdir}/iso" -o ro

        # check iso
        if [[ -f "${WD}/${workdir}/iso/aui/AUIDATA" ]]; then
                eval $(grep cow_label "${WD}/${workdir}/iso/aui/AUIDATA")
                eval $(grep iso_label "${WD}/${workdir}/iso/aui/AUIDATA")
                eval $(grep install_dir "${WD}/${workdir}/iso/aui/AUIDATA")
        else
                  echo "Error: ${isoname} is not a compatible image!"
                  umount "${WD}/${workdir}/iso"
                  rmdir "${WD}/${workdir}/usb"{2,3} "${WD}/${workdir}/iso" "${WD}/${workdir}"
                  _usage 1
        fi

        # Copy iso to usb
        echo 'Writing image...'
        flock "${usbdevice}" wipefs "${usbdevice}"* --all --force > /dev/null
        partprobe "${usbdevice}"
        if ! cp -v "${isoname}" "${usbdevice}"; then
                echo 'Write failed!'
                exit 1
        fi
        sleep 2
}

_partitions () {
        # Delete iso esp
        flock "${usbdevice}" sfdisk --delete "${usbdevice}" 2 -w always &> /dev/null
        # Add ESP and persistent partitions, format ext4 partition with encryption support
        sleep 1
        echo 'Creating partitions...'
        if ! echo "$(( isosize / 512 )),${ESPSIZE},ef," | flock "${usbdevice}" sfdisk "${usbdevice}" --append -W always; then
                echo 'Failed to create new partition layout!'
                exit 1
        fi
        sleep 1
        if ! echo "$(( isosize / 512 + ESPSIZE )),,83," | flock "${usbdevice}" sfdisk "${usbdevice}" --append -W always; then
               echo 'Failed to create new partition layout!'
               exit 1
        fi
        sleep 1
}

_format () {
        echo 'Formatting...'
        if ! flock "${usbdevice}2" mkfs.fat "${usbdevice}2" -F32 -n 'AUIESP'; then
               echo 'Partition format failed!'
               exit 1
        fi
        cowdevice="${usbdevice}3"
        if [[ -n "${encryption:-}" ]]; then
               _encrypt_mkluks
        fi
        if ! flock "${cowdevice}" mkfs.ext4 "${cowdevice}" -L "${cow_label}" -O encrypt; then
               echo 'Partition format failed!'
               exit 1
        fi
}

_mount () {
        # Mount usb device
        echo 'Mounting usb device...'
        mount "${usbdevice}2" "${WD}/${workdir}/usb2"
        mount "${cowdevice}" "${WD}/${workdir}/usb3"
}

_persistence () {
        # Persistence setup
        echo 'Setting up persistence...'
        cp -LrT "${WD}/${workdir}/iso/aui/esp" "${WD}/${workdir}/usb2/"
        cp -r "${WD}/${workdir}/iso/aui/loader" "${WD}/${workdir}/usb2/"
        cp -a "${WD}/${workdir}/iso/aui/persistent_${iso_label}" "${WD}/${workdir}/usb3/"
        cp "${WD}/${workdir}/iso/aui/refind.conf" "${WD}/${workdir}/usb2/EFI/BOOT/"
        cp "${WD}/${workdir}/iso/aui/AUIDATA" "${WD}/${workdir}/usb3/"
        if [[ -n "${encryption:-}" ]]; then
               _encrypt_setup
        else
               true
        fi
}

_finalize () {
        # Clean up
        umount "${WD}/${workdir}/usb"{2,3} "${WD}/${workdir}/iso"
        rmdir "${WD}/${workdir}/usb"{2,3} "${WD}/${workdir}/iso" "${WD}/${workdir}"
        if [[ -n "${encryption:-}" ]]; then
               cryptsetup close auicrypt
        else
                true
        fi
}

# arguments
OPTS=$(getopt -o 'h' --long 'encrypt,help' -n 'aui-mkpersistent' -- "$@")
[[ $? -eq 0 ]] || _usage 1
eval set -- "${OPTS}"
unset OPTS
[[ $# -eq 1 ]] && _usage 1

while true; do
        case "$1" in
                '-h'|'--help')
                        _help 0 ;;
                '--encrypt')
                        encryption=yes
                        shift ;;
                '--')
                        shift
                        break ;;
        esac
done

_checks "$@"
_init
_confirm_write
_iso_copy
_partitions
_format
_mount
_persistence
_finalize

echo 'Done!'

# vim: set expandtab:
