#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later

set -e -u

appname="${0##*/}"
username=archie

_usage () {
        echo
        echo 'aui-mkinstall, performs a normal installation on a USB drive.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkinstall <iso image> <usb device> [options]'
        echo
        echo 'Get help:'
        echo 'aui-mkinstall --help'
        exit $1
}

_help () {
        echo
        echo 'Archuseriso tool for normal installation on a USB drive'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkinstall <iso image> <usb device> [options]'
        echo
        echo 'Options:'
        echo '-h, --help           command line help'
        echo '--encrypt            encrypt persistent partition'
        echo '--ext4journal        enable ext4 journal (disabled by default for minimizing drive writes)'
        echo '--f2fs               use the F2FS file system for the root partition (Default Ext4)'
        echo "--username <user>    set a custom username, default username is 'archie'"
        echo
        echo 'Example:'
        echo 'aui-mkinstall archuseriso-xfce-1231-x64.iso /dev/sdc --encrypt'
        echo
        exit $1
}

_msg_info () {
        local _msg="${1}"
        printf '[%s] INFO: %s\n' "${appname}" "${_msg}"
}

_encrypt_mkluks () {
        echo
        _msg_info "Setting up encrypted partition, type in a passphrase of your choice"
        if ! cryptsetup --label "${cryptlabel:=AUICRYPT}" --uuid "${cryptuuid:=$(uuidgen)}" -q luksFormat "${usbdevice}2"; then
                echo 'Encryption setup failed, exiting!'
                exit 1
        fi
        echo
        _msg_info "LUKS encryption setup done! type in your passphrase to unlock device"
        if ! cryptsetup open "${usbdevice}2" auicrypt; then
                echo 'Error: Could not unlock device! Exiting.'
                exit 1
        fi
        echo
        rootdevice=/dev/mapper/auicrypt
}

_encrypt_setup () {
        _msg_info "Finalizing encryption settings"
        sed -i "s|block|& encrypt|" "${WD}/${workdir}/usb/etc/mkinitcpio.conf"
        sed -i "s|root=LABEL=|cryptdevice=UUID=${cryptuuid}:auicrypt &|" \
               "${WD}/${workdir}/usb/boot/refind_linux.conf"
        sed -i "s|root=LABEL=|cryptdevice=UUID=${cryptuuid}:auicrypt &|" \
               "${WD}/${workdir}/usb/boot/syslinux/syslinux.cfg"
        _msg_info "initramfs update"
        # ignore mkinitcpio return status error
        set +e
        arch-chroot "${WD}/${workdir}/usb" mkinitcpio -P &> /dev/null
        set -e
        _msg_info "Done!"
}

_checks () {
        if [[ $# -ne 2 ]]; then
                echo 'Error: Invalid arguments!'
                _usage 1
        fi
        if [[ ${EUID} -ne 0 ]]; then
                echo 'This script must be run as root!'
                exit 1
        fi
        isoname=$1
        usbdevice=$2
        # command arguments reverse order compatibility
        if [[ $(file "${usbdevice}" 2> /dev/null) =~ 'MBR boot sector' ]]; then
                isoname=$2
                usbdevice=$1
        fi
        if [[ $(stat -c %t "${usbdevice}" 2> /dev/null) -ne 8 ]]; then
                echo "Error: ${usbdevice} is not a block device!"
                _usage 1
        fi
        if [[ $(lsblk -dnro hotplug "${usbdevice}" 2> /dev/null) -ne 1 ]]; then
                echo "Error: ${usbdevice} is not a removable block device!"
                _usage 1
        fi
        if [[ "$(lsblk -dnro tran "${usbdevice}" 2> /dev/null)" != 'usb' ]]; then
                echo "Error: ${usbdevice} is not a usb device!"
                _usage 1
        fi
        if grep -q "${usbdevice}" /proc/mounts; then
                echo "Error: ${usbdevice} appears in active mounts, unmount device before proceeding!"
                exit 1
        fi
        if [[ ! -f "${isoname}" ]]; then
                echo "file ${isoname} not found!"
                _usage 1
        fi
        if [[ ! $(file "${isoname}" 2> /dev/null) =~ 'MBR boot sector' ]]; then
                echo "Error: ${isoname} is not an iso image!"
                _usage 1
        fi
        if [[ -n "${f2fs:-}" ]]; then
                if ! pacman -Q f2fs-tools &> /dev/null; then
                        echo 'f2fs-tools package not installed, aborting!'
                        exit 0
                fi
        fi
}

_init () {
        devicesize=$(blockdev --getsize64 "${usbdevice}")
        ESPSIZE=1048576 # 512 MiB
        isosize=$(stat -c %s "${isoname}")
        MINCAPACITY=16000000000 # 16 GB
        SECSTART=2048 # 1st sector
        WD="${PWD}"
        workdir=auiwork
        # Check usb device capacity
        if [[ ${devicesize} -lt ${MINCAPACITY} ]]; then
                echo 'Storage capacity error!'
                exit 1
        fi
}

_confirm_write () {
        # Confim write
        echo
        _msg_info "This process may take a long time depending on the device write speed, be patient!"
        _msg_info ""
        _msg_info "ISO file:   ${isoname}"
        _msg_info "USB device: ${usbdevice}"
        _msg_info "Configured username: ${username}"
        echo
        read -r -n1 -p "Confirm write to $(lsblk -dnro model,size ${usbdevice}) (N/y)? "
        echo
        if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
                echo 'Operation canceled by user!'
                exit 0
        fi

        # Check & prepare working directory
        for mountpoint in "${workdir}" "${workdir}/"{iso,squashfs,usb}; do
                if grep -q "${mountpoint}" /proc/mounts; then
                        echo "Error: ${mountpoint} appears in active mounts, unmount before proceeding!"
                        exit 1
                fi
        done
        for mountpoint in "${workdir}" "${workdir}/"{iso,squashfs,usb}; do
                if [[ -e "${WD}/${mountpoint}" ]]; then
                       echo "Error: ${mountpoint} exists in working directory! Delete or rename before proceeding!"
                       exit 1
                fi
        done
        if [[ -e /dev/mapper/auicrypt ]]; then
                echo 'Error: cryptsetup mapping /dev/mapper/auicrypt exists! cannot proceed.'
                exit 1
        fi
        mkdir -p "${WD}/${workdir}/"{iso,squashfs,usb}

        # Mount iso & live filesystem
        echo
        _msg_info "Mounting iso: mountpoint ${WD}/${workdir}/iso"
        mount "${isoname}" "${WD}/${workdir}/iso" -o ro
        _msg_info "Mounting live image: mountpoint ${WD}/${workdir}/squashfs"
        mount "${WD}/${workdir}/iso/arch/x86_64/airootfs.sfs" "${WD}/${workdir}/squashfs" -o ro

        # check iso
        if [[ -f "${WD}/${workdir}/iso/aui/AUIDATA" && -d "${WD}/${workdir}/iso/aui/install" ]]; then
                eval $(grep label_root "${WD}/${workdir}/iso/aui/AUIDATA")
                eval $(grep label_boot "${WD}/${workdir}/iso/aui/AUIDATA")
        else
                echo "Error: ${isoname} is not a compatible image!"
                umount "${WD}/${workdir}/squashfs"
                sleep 1
                umount "${WD}/${workdir}/iso"
                rmdir "${WD}/${workdir}/"{usb,squashfs,iso,}
                _usage 1
        fi
}

_partitions () {
        # Create usb device partition table & partitions
        echo
        flock "${usbdevice}" wipefs "${usbdevice}"* --all --force > /dev/null
        sleep 1
        _msg_info "Creating partitions: new gpt label"
        echo 'label: gpt' | flock "${usbdevice}" sfdisk "${usbdevice}" -w always > /dev/null
        sleep 1
        _msg_info "partition #1: boot partition: $(( ESPSIZE / 1024 / 2)) MiB"
        echo "${SECSTART},${ESPSIZE},U," | flock "${usbdevice}" sfdisk "${usbdevice}" -W always > /dev/null 
        sleep 1
        _msg_info "partition #2: root partition: free space"
        echo "$(( SECSTART + ESPSIZE)),,L," | flock "${usbdevice}" sfdisk "${usbdevice}" --append -W always > /dev/null
        sleep 1
}

_format_f2fs() {
        _msg_info "partition #2: type F2FS, label ${label_root:-AUIROOT}"
        if ! flock "${rootdevice}" mkfs.f2fs "${rootdevice}" -l "${label_root:=AUIROOT}" -O encrypt,extra_attr,compression > /dev/null; then
                echo 'Formatting partition failed!'
                exit 1
        fi
}

_format_ext4 () {
        _msg_info "partition #2: type Ext4, label ${label_root:-AUIROOT}"
        if ! flock "${rootdevice}" mkfs.ext4 "${rootdevice}" -L "${label_root:=AUIROOT}" -O encrypt,'^has_journal' -q; then
                echo 'Formatting partition failed!'
                exit 1
        fi
        # enable ext4 journal
        if [[ -n "${ext4journal:-}" ]]; then
                _msg_info "Ext4 partition: enabling file system journalisation"
                tune2fs -O 'has_journal' "${rootdevice}"
        fi
}

_format () {
        echo
        _msg_info "Formatting paritions"
        _msg_info "partition #1: type FAT, label ${label_boot:-AUIBOOT}"
        if ! flock "${usbdevice}1" mkfs.fat "${usbdevice}1" -F32 -n "${label_boot:=AUIBOOT}"; then
                echo 'Partition format failed!'
                exit 1
        fi
        rootdevice="${usbdevice}2"
        if [[ -n "${encryption:-}" ]]; then
                _encrypt_mkluks
        fi
        # Root partition, filesystem type
        # Default ext4
        if [[ -n "${f2fs:-}" ]]; then
                _format_f2fs
        else
                _format_ext4
        fi
}

_mount () {
        # Mount usb device
        echo
        _msg_info "Mounting partitions"
        _msg_info "device: ${rootdevice}, mountpoint: ${WD}/${workdir}/usb"
        mount "${rootdevice}" "${WD}/${workdir}/usb"
        mkdir "${WD}/${workdir}/usb/boot"
        _msg_info "device: ${usbdevice}1, mountpoint: ${WD}/${workdir}/boot"
        mount "${usbdevice}1" "${WD}/${workdir}/usb/boot"
        mkdir -p "${WD}/${workdir}/usb/boot/EFI/BOOT"
}

_install () {
        # Copy livesystem to usb device
        echo
        _msg_info "Copying data to ${WD}/${workdir}/usb, may take some time"
        cp -aT "${WD}/${workdir}/squashfs" "${WD}/${workdir}/usb"
        # Copy aui install tree
        cp -aT "${WD}/${workdir}/iso/aui/install" "${WD}/${workdir}/usb"

        # System settings
        # * remove live settings except volatile journal
        # * fstab
        # * live user renamed 'archie', no password set
        _msg_info "Removing live settings"
        # kernel
        cp "${WD}/${workdir}/iso/arch/boot/x86_64/vmlinuz-linux" "${WD}/${workdir}/usb/boot/"
        cp "${WD}/${workdir}/iso/arch/boot/intel-ucode.img" "${WD}/${workdir}/usb/boot/"
        cp "${WD}/${workdir}/iso/arch/boot/amd-ucode.img" "${WD}/${workdir}/usb/boot/"
        # fstab
        sed -i "s|%AUIROOT%|${label_root}|;
                s|%AUIBOOT%|${label_boot}|" \
               "${WD}/${workdir}/usb/etc/fstab"
        # sshd, mirrorlist, logind.conf
        sed -i 's/^\(PermitRootLogin \).\+/#\1prohibit-password/' "${WD}/${workdir}/usb/etc/ssh/sshd_config"
        rm -r "${WD}/${workdir}/usb/etc/systemd/logind.conf.d"
        # live services
        arch-chroot "${WD}/${workdir}/usb" systemctl disable pacman-init.service choose-mirror.service --quiet
        rm -r "${WD}/${workdir}/usb/etc/systemd/system/"{choose-mirror.service,pacman-init.service,etc-pacman.d-gnupg.mount,getty@tty1.service.d}
        rm "${WD}/${workdir}/usb/root/"{.automated_script.sh,.zlogin}
        rm "${WD}/${workdir}/usb/etc/initcpio/hooks/archiso"
        # autologin
        if [[ -e "${WD}/${workdir}/usb/etc/lightdm/lightdm.conf" ]]; then
                sed -i 's/^\(autologin-user=\)live$/#\1/' "${WD}/${workdir}/usb/etc/lightdm/lightdm.conf"
                sed -i 's/^\(autologin-session=\).*/#\1/' "${WD}/${workdir}/usb/etc/lightdm/lightdm.conf"
        fi
        if [[ -e "${WD}/${workdir}/usb/etc/sddm.conf.d/autologin.conf" ]]; then
                rm "${WD}/${workdir}/usb/etc/sddm.conf.d/autologin.conf"
        fi
        # sudo
        sed -i 's/^\(%wheel\s.*NOPASSWD\)/# \1/' "${WD}/${workdir}/usb/etc/sudoers"
        sed -i 's/^#\s\(%wheel\s.*)\sALL\)$/\1/' "${WD}/${workdir}/usb/etc/sudoers"
        # Arch keyring
        _msg_info "Initialising pacman keys"
        arch-chroot "${WD}/${workdir}/usb" pacman-key --init &> /dev/null
        arch-chroot "${WD}/${workdir}/usb" pacman-key --populate archlinux &> /dev/null
        # username
        _msg_info "Configuring user ${username}"
        mv "${WD}/${workdir}/usb/home/live" "${WD}/${workdir}/usb/home/${username}"
        sed -i "s/live/${username}/g" \
               "${WD}/${workdir}/usb/etc/"{passwd,group,shadow,gshadow} \
               "${WD}/${workdir}/usb/etc/samba/smb.conf"
        # haveged, initramfs
        arch-chroot "${WD}/${workdir}/usb" systemctl enable haveged --quiet
        _msg_info "initramfs update"
        # ignore mkinitcpio return status error
        set +e
        arch-chroot "${WD}/${workdir}/usb" mkinitcpio -P &> /dev/null
        set -e
        _msg_info "Done!"

        # rEFInd boot manager
        _msg_info "Setting up boot loader"
        cp -rT "${WD}/${workdir}/iso/EFI/boot/" "${WD}/${workdir}/usb/boot/EFI/BOOT/"
        cp "${WD}/${workdir}/iso/shellx64.efi" "${WD}/${workdir}/usb/boot/EFI/"
        cp "${WD}/${workdir}/iso/EFI/boot/icons/os_arch.png" "${WD}/${workdir}/usb/boot/vmlinuz-linux.png"
        cp "${WD}/${workdir}/iso/aui/refind_linux.conf" "${WD}/${workdir}/usb/boot/"
        sed -i "s|%AUIROOT%|${label_root}|" "${WD}/${workdir}/usb/boot/refind_linux.conf"

        # syslinux bootloader
        mkdir -p "${WD}/${workdir}/usb/boot/syslinux/"
        cp "${WD}/${workdir}/iso/aui/syslinux.cfg" "${WD}/${workdir}/usb/boot/syslinux/"
        cp "${WD}/${workdir}"/usb/usr/lib/syslinux/bios/*.c32 "${WD}/${workdir}/usb/boot/syslinux/"

        if [[ -n "${encryption:-}" ]]; then
                _encrypt_setup
        else
                true
        fi
}

_finalize () {
        # Unmount & remove temp dirs
        echo
        _msg_info 'Unmounting work directories, may take some time, be patient!'
        umount "${usbdevice}1" "${rootdevice}"
        umount "${WD}/${workdir}/squashfs"
        sleep 1
        umount "${WD}/${workdir}/iso"
        rmdir "${WD}/${workdir}/"{usb,squashfs,iso,}

        if [[ -n "${encryption:-}" ]]; then
                cryptsetup close auicrypt
        else
                true
        fi
}

_bootloader () {
        echo
        _msg_info "Installing boot loader"
        if ! syslinux --directory syslinux --install "${usbdevice}1" > /dev/null; then
                echo 'Bootloader installation failed!'
                exit 1
        fi
        if ! dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/gptmbr.bin of="${usbdevice}" 2> /dev/null; then
                echo 'Bootloader installation failed!'
                exit 1
        fi
        if ! sfdisk --part-attrs "${usbdevice}" 1 LegacyBIOSBootable > /dev/null; then
                echo 'Bootloader installation failed!'
                exit 1
        fi
}

# arguments
OPTS=$(getopt -o 'h' --long 'encrypt,ext4journal,f2fs,help,username:' -n 'aui-mkinstall' -- "$@")
[[ $? -eq 0 ]] || _usage 1
eval set -- "${OPTS}"
unset OPTS
[[ $# -eq 1 ]] && _usage 1

while true; do
        case "$1" in
                '-h'|'--help')
                        _help 0 ;;
                '--encrypt')
                        encryption=yes
                        shift ;;
                '--ext4journal')
                        ext4journal=yes
                        shift ;;
                '--f2fs')
                        f2fs=yes
                        shift ;;
                '--username')
                        username="${2}"
                        shift 2 ;;
                '--')
                        shift
                        break ;;
        esac
done

_checks "$@"
_init
_confirm_write
_partitions
_format
_mount
_install
_finalize
_bootloader

_msg_info "Done!"
echo
echo "IMPORTANTS NOTES:"
echo "Configured username is ${username}, no password was set!"
echo
echo "Enjoy ;)"

# vim: set expandtab:
