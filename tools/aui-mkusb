#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later

set -e -u

appname="${0##*/}"

_usage () {
        echo
        echo 'aui-mkusb, Live USB creation tool featuring persistent storage'
        echo 'and encryption.'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkusb <iso image> <usb device> [options]'
        echo
        echo 'Get help:'
        echo 'aui-mkusb --help'
        exit $1
}

_help () {
        echo
        echo 'Archuseriso tool for creating a Live USB with persistent storage'
        echo
        echo 'Command synopsis:'
        echo 'aui-mkusb <usb device> <iso image> [options]'
        echo
        echo 'Options:'
        echo '-h, --help                Command line help'
        echo '--encrypt                 Encrypt persistent partition'
        echo '--ext4journal             Enable ext4 journal (disabled by default for minimizing drive writes)'
        echo '--f2fs                    Use the F2FS file system for the persistent partition (Default Ext4)' 
        echo '--rawwrite                Raw ISO image write to USB drive (dd like mode)'
        echo '--sizepart2 integer[g|G]  2nd partition size in GiB (Boot partition, FAT)'
        echo '--sizepart3 integer[g|G]  3rd partition size in GiB (persistent partition, Ext4/F2FS)'
        echo
        echo 'Example:'
        echo 'sudo aui-mkusb aui-xfce-linux_5_7_10-optimus-0724-x64.iso /dev/sdc'
        echo
        echo 'Example with custom partitioning, unallocated drive space left for other usages:'
        echo 'sudo aui-mkusb aui-xfce-linux_5_7_10-i3-0724-x64.iso /dev/sdc --sizepart2 1G --sizepart3 10G'
        echo
        exit $1
}

_msg_info () {
        local _msg="${1}"
        printf '[%s] INFO: %s\n' "${appname}" "${_msg}"
}

_unmount () {
        echo
        _msg_info "Unmounting working directories, may take some time"
        sync
        if mountpoint -q "${WD}/${workdir}/iso"; then
                umount "${WD}/${workdir}/iso"
        fi
        if mountpoint -q "${WD}/${workdir}/usb1"; then
                umount "${WD}/${workdir}/usb1"
        fi
        if mountpoint -q "${WD}/${workdir}/usb2"; then
                umount "${WD}/${workdir}/usb2"
        fi
        if mountpoint -q "${WD}/${workdir}/usb3"; then
                umount "${WD}/${workdir}/usb3"
        fi
        rmdir "${WD}/${workdir}/usb"{1,2,3} "${WD}/${workdir}/iso" "${WD}/${workdir}"
}

_encrypt_mkluks () {
        echo
        _msg_info "Setting up encrypted partition, type in a passphrase of your choice"
        if ! cryptsetup --label "${cryptlabel:=AUICRYPT}" --uuid "${cryptuuid:=$(uuidgen)}" -q luksFormat "${usbdevice}3" > /dev/null; then
               echo 'Encryption setup failed, exiting!'
               _unmount
               exit 1
        fi
        echo
        _msg_info "LUKS encryption setup done! type in your passphrase to unlock partition"
        if ! cryptsetup open "${usbdevice}3" auicrypt; then
               echo 'Error: Could not unlock partition! Exiting.'
               _unmount
               exit 1
        fi
        echo
        cowdevice=/dev/mapper/auicrypt
}

_encrypt_setup () {
        echo
        _msg_info "Setting up encryption"
        mkdir "${WD}/${workdir}/"{overlay,squashfs}
        mount "${WD}/${workdir}/iso/${install_dir}/x86_64/airootfs.sfs" "${WD}/${workdir}/squashfs" -o ro
        mkdir "${WD}/${workdir}/usb3/persistent_${iso_label}/x86_64/workdir"
        mount -t overlay airootper -o lowerdir="${WD}/${workdir}/squashfs",upperdir="${WD}/${workdir}/usb3/persistent_${iso_label}/x86_64/upperdir",workdir="${WD}/${workdir}/usb3/persistent_${iso_label}/x86_64/workdir" "${WD}/${workdir}/overlay"
        mount "${WD}/${workdir}/usb2" "${WD}/${workdir}/overlay/boot" -o bind
        sed -i "s|block|& encrypt|" "${WD}/${workdir}/overlay/etc/mkinitcpio.conf"
        _msg_info "initramfs update"
        # ignore mkinitcpio return status error
        set +e
        arch-chroot "${WD}/${workdir}/overlay" mkinitcpio -P &> /dev/null
        set -e
        sed -i "s|storage$|& encrypted|
                s|overlay|cryptdevice=UUID=${cryptuuid}:auicrypt &|" \
                "${WD}/${workdir}/overlay/boot/loader/entries/0aui_persistence-x86_64.conf"
        sed -i "s|storage$|& encrypted|
                s|overlay|cryptdevice=UUID=${cryptuuid}:auicrypt &|" \
                "${WD}/${workdir}/overlay/boot/${install_dir}/boot/syslinux/archiso_sys.cfg"
        umount "${WD}/${workdir}/overlay/boot" "${WD}/${workdir}/overlay" "/${WD}/${workdir}/squashfs"
        sleep 1
        rmdir "${WD}/${workdir}/overlay" "/${WD}/${workdir}/squashfs"
}

_checks () {
        if [[ $# -ne 2 ]]; then
               echo 'Error: Invalid arguments!'
               _usage 1
        fi
        if [[ ${EUID} -ne 0 ]]; then
               echo 'This script must be run as root!'
               exit 1
        fi
        isoname=$1
        usbdevice=$2
        # command arguments reverse order compatibility
        if [[ $(file "${usbdevice}" 2> /dev/null) =~ 'MBR boot sector' ]]; then
                # reverse order compatibility
                isoname=$2
                usbdevice=$1
        fi
        if [[ ! $(stat -c %t "${usbdevice}" 2> /dev/null) -eq 8 ]]; then
               echo "Error: ${usbdevice} is not a block device!"
               _usage 1
        fi
        if [[ ! $(lsblk -dnro hotplug "${usbdevice}" 2> /dev/null) -eq 1 ]]; then
                echo "Error: ${usbdevice} is not a removable block device!"
                _usage 1
        fi
        if [[ ! "$(lsblk -dnro tran "${usbdevice}" 2> /dev/null)" == 'usb' ]]; then
                echo "Error: ${usbdevice} is not a usb device!"
                _usage 1
        fi
        if grep -q "${usbdevice}" /proc/mounts; then
                echo "Error: ${usbdevice} appears in active mounts, unmount drive before proceeding!"
                exit 1
        fi
        if [[ ! -f "${isoname}" ]]; then
               echo "file ${isoname} not found!"
               _usage 1
        fi
        if [[ ! $(file "${isoname}" 2> /dev/null) =~ 'MBR boot sector' ]]; then
                echo "Error: ${isoname} is not an iso image!"
                _usage 1
        fi
        # USB Medium type isohybrid / FAT
        if [[ -n "${rawwrite:-}" ]]; then
                echo
                echo 'rawwrite option set. Ignoring other options!'
                unset -v encrypt cowsize fatsize
        fi
        if [[ -n "${fatsize:-}" ]]; then
                if ! [[ "${fatsize/[gG]}" =~ ^[1-9][0-9]?+$ ]]; then
                        echo "FAT partition size error: Invalid --fat-size argument (GiB): ${fatsize}"
                        _usage 1
                fi
        fi
        if [[ -n "${cowsize:-}" ]]; then
                if ! [[ "${cowsize/[gG]}" =~ ^[1-9][0-9]?+$ ]]; then
                        echo "Ext4/F2FS partition size error: Invalid size argument (GiB): ${cowsize}"
                        _usage 1
                fi
        fi
        if [[ -n "${f2fs:-}" ]]; then
                if ! pacman -Q f2fs-tools &> /dev/null; then
                        echo 'f2fs-tools package not installed, aborting!'
                        exit 0
                fi
        fi
}

_init () {
        local _cowsize
        local _fatsize
        devicesize=$(blockdev --getsize64 "${usbdevice}")
        LOGSEC=$(lsblk --noheadings --raw --scsi --output log-sec "${usbdevice}")
        # Drive partition #1, first sector at 1 MiB
        SECSTART=$(( 1024 * 1024 / LOGSEC ))
        ESP=512 # 512 MiB
        FREE=1024 # 1 GiB
        isosize=$(stat -c %s "${isoname}")
        WD="${PWD}"
        workdir=auiwork
        # USB Medium type isohybrid / FAT
        if [[ -n "${rawwrite:-}" ]]; then
                ESP=0
                FREE=0
        fi
        # Check usb drive capacity
        if [[ ! ${devicesize} -gt $(( isosize + FREE * 1024 * 1024 )) ]]; then
               echo 'Storage capacity error!'
               exit 1
        fi
        # Size
        if [[ -n "${fatsize:-}" ]]; then
                _fatsize=$(( ${fatsize/[gG]} * 1024 * 1024 * 1024 ))
        else
                _fatsize=$(( ESP * 1024 * 1024 ))
        fi
        if [[ -n "${cowsize:-}" ]]; then
                _cowsize=$(( ${cowsize/[gG]} * 1024 * 1024 * 1024 ))
        else
                _cowsize=0
        fi
        # check partition size
        if [[ ! ${devicesize} -gt $(( isosize + _fatsize + _cowsize )) ]]; then
                echo "Size settings error: exceeds drive storage capacity (GiB)!"
                exit 1
        fi
}

_confirm_write () {
        # Confim write
        echo
        _msg_info "ISO file:   ${isoname}"
        _msg_info "USB device: ${usbdevice}"
        echo
        read -r -n1 -p "Confirm write to $(lsblk -dnro model,size ${usbdevice}) (N/y)? "
        echo
        if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
               echo 'Operation canceled by user!'
               exit 0
        fi
}

_rawwrite () {
        echo
        _msg_info "Creating live's medium, raw copy (dd like mode), no persistence"
        if ! cp -v "${isoname}" "${usbdevice}"; then
                echo 'Write failed!'
                _unmount
                exit 1
        fi
}

_usb_prepare () {
        # Check & prepare working directory
        for mountpoint in "${workdir}" "${workdir}/"{iso,overlay,squashfs} "${workdir}/usb"{1,2,3}; do
                if grep -q "${mountpoint}" /proc/mounts; then
                       echo "Error: ${mountpoint} appears in active mounts, unmount before proceeding!"
                       exit 1
                fi
        done
        for mountpoint in "${workdir}" "${workdir}/"{iso,overlay,squashfs} "${workdir}/usb"{1,2,3}; do
                if [[ -e "${WD}/${mountpoint}" ]]; then
                        echo "Error: ${mountpoint} exists in working directory! Delete or rename before proceeding!"
                        exit 1
                fi
        done
        if [[ -e /dev/mapper/auicrypt ]]; then
                echo 'Error: cryptsetup mapping /dev/mapper/auicrypt exists! cannot proceed.'
                exit 1
        fi
        mkdir -p "${WD}/${workdir}/iso" "${WD}/${workdir}/usb"{1,2,3}

        # Mount iso
        echo
        _msg_info 'Mounting iso'
        _msg_info "mountpoint: ${WD}/${workdir}/iso"
        if ! mount "${isoname}" "${WD}/${workdir}/iso" -o ro; then
                echo "Error: mounting iso failed!"
                rmdir "${WD}/${workdir}/usb"{1,2,3} "${WD}/${workdir}/iso" "${WD}/${workdir}"
                exit 1
        fi

        # check iso
        if [[ -f "${WD}/${workdir}/iso/aui/AUIDATA" ]] && $(grep -q 'AUIDATA=v2' "${WD}/${workdir}/iso/aui/AUIDATA"); then
                eval $(grep cow_label "${WD}/${workdir}/iso/aui/AUIDATA")
                eval $(grep iso_label "${WD}/${workdir}/iso/aui/AUIDATA")
                eval $(grep install_dir "${WD}/${workdir}/iso/aui/AUIDATA")
        else
                echo "Error: ${isoname} is not a compatible image!"
                echo
                echo 'For the console iso image which does not support'
                echo 'persitence use the '\''--rawwrite'\'' command option'
                echo 'this way:'
                echo
                echo "sudo aui-mkusb ${isoname} ${usbdevice} --rawwrite"
                _unmount
                _usage 1
        fi
}

_partitions () {
        local _fatsize=$(( ESP * 1024 * 1024 / LOGSEC ))
        # GPT Partition type : Linux Filesystem
        local _ptlinux="0FC63DAF-8483-4772-8E79-3D69D8477DE4"
        # GPT Partition type : Microsoft basic data
        local _ptmsft="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"
        flock "${usbdevice}" wipefs "${usbdevice}"* --all --force > /dev/null
        partprobe "${usbdevice}"
        sleep 2
        echo
        _msg_info "Creating partitions: new gpt label"
        if ! echo 'label: gpt' | sfdisk "${usbdevice}" -W always > /dev/null; then
                echo 'Failed to create new gpt partition table!'
                _unmount
                exit 1
        fi
        sleep 2
        if [[ -n "${fatsize:-}" ]]; then
                _fatsize=$(( ${fatsize/[gG]} * 1024 * 1024 * 1024 / LOGSEC ))
        fi
        if [[ -n "${cowsize:-}" ]]; then
                _cowsize=$(( ${cowsize/[gG]} * 1024 * 1024 * 1024 / LOGSEC ))
        fi
        # partition #1 iso data
        _msg_info "partition #1, live partition:  $(( (isosize / LOGSEC + ESP * 1024 * 1024 / LOGSEC * 3 / 8) / 1024 / 2 )) MiB"
        if ! echo "${SECSTART},$(( isosize / LOGSEC + ESP * 1024 * 1024 / LOGSEC * 3 / 8 )),${_ptlinux}," | sfdisk "${usbdevice}" -W always > /dev/null; then
                _unmount
                echo 'Failed to create new partition layout!'
                exit 1
        fi
        sleep 2
        # partition #2 boot & efi partition
        _msg_info "partition #2, boot partition: $(( _fatsize / 1024 / 2 )) MiB"
        if ! echo "$(( SECSTART + isosize / LOGSEC + ESP * 1024 * 1024 / LOGSEC * 3 / 8 )),${_fatsize},${_ptmsft}," | sfdisk "${usbdevice}" --append -W always > /dev/null; then
                _unmount
                echo 'Failed to create new partition layout!'
                exit 1
        fi
        sleep 2
        # partition #3 persistent partition
        _msg_info "partition #3, persistent partition: ${cowsize:-free space}"
        if ! echo "$(( SECSTART + isosize / LOGSEC + ESP * 1024 * 1024 / LOGSEC * 3 / 8 + _fatsize )),${_cowsize:-},${_ptlinux}," | sfdisk "${usbdevice}" --append -W always > /dev/null; then
                echo 'Failed to create new partition layout!'
                _unmount
                exit 1
        fi
        sleep 2
}

_format_f2fs() {
        _msg_info "partition #3: type F2FS, label ${cow_label}"
        if ! flock "${cowdevice}" mkfs.f2fs "${cowdevice}" -l "${cow_label}" -O encrypt,extra_attr,compression > /dev/null; then
               echo 'Formatting partition failed!'
                _unmount
               exit 1
        fi
}

_format_ext4 () {
        _msg_info "partition #3: type Ext4, label ${cow_label}"
        if ! flock "${cowdevice}" mkfs.ext4 "${cowdevice}" -L "${cow_label}" -O encrypt,'^has_journal' -q > /dev/null; then
               echo 'Formatting partition failed!'
                _unmount
               exit 1
        fi
        # enable ext4 journal
        if [[ -n "${ext4journal:-}" ]]; then
                _msg_info "Ext4 partitions: enabling file system journalisation"
                tune2fs -O 'has_journal' "${usbdevice}1"
                tune2fs -O 'has_journal' "${cowdevice}"
        fi
}

_format () {
        echo
        _msg_info "Formatting partitions"
        _msg_info "partition #1: type Ext4, label ${iso_label}"
        if ! flock "${usbdevice}1" mkfs.ext4 "${usbdevice}1" -L "${iso_label}" -O encrypt,'^has_journal' -m 0 -q > /dev/null; then
               echo 'Partition format failed!'
                _unmount
               exit 1
        fi
        _msg_info "partition #2: type FAT, label AUIESP"
        if ! flock "${usbdevice}2" mkfs.fat "${usbdevice}2" -F32 -n AUIESP > /dev/null; then
               echo 'Partition format failed!'
                _unmount
               exit 1
        fi
        cowdevice="${usbdevice}3"
        if [[ -n "${encryption:-}" ]]; then
               _encrypt_mkluks
        fi
        # Persistent partition, filesystem type
        # Default ext4
        if [[ -n "${f2fs:-}" ]]; then
                _format_f2fs
        else
                _format_ext4
        fi
}

_mount () {
        # Mount usb device
        echo
        _msg_info "Mounting partitions"
        _msg_info "device: ${usbdevice}1, mountpoint: ${WD}/${workdir}/usb1"
        mount "${usbdevice}1" "${WD}/${workdir}/usb1"
        _msg_info "device: ${usbdevice}2, mountpoint: ${WD}/${workdir}/usb2"
        mount "${usbdevice}2" "${WD}/${workdir}/usb2"
        _msg_info "device: ${cowdevice}, mountpoint: ${WD}/${workdir}/usb3"
        mount "${cowdevice}" "${WD}/${workdir}/usb3"
}

_copy () {
        # Copy iso data to partition #1
        echo
        _msg_info "Copying iso data to ${WD}/${workdir}/usb1"
        cp -rT "${WD}/${workdir}/iso" "${WD}/${workdir}/usb1"
}

_persistence () {
        # Persistence setup
        echo
        _msg_info "Setting up persistence"
        _msg_info "copying boot loader data to ${WD}/${workdir}/usb2"
        cp -LrT "${WD}/${workdir}/iso/aui/esp" "${WD}/${workdir}/usb2/"
        cp -r "${WD}/${workdir}/iso/aui/loader" "${WD}/${workdir}/usb2/"
        cp "${WD}/${workdir}/iso/aui/archiso_sys.cfg" "${WD}/${workdir}/usb2/${install_dir}/boot/syslinux/"
        cp "${WD}/${workdir}/iso/aui/refind.conf" "${WD}/${workdir}/usb2/EFI/BOOT/"
        _msg_info "copying persistence data to ${WD}/${workdir}/usb3"
        cp -a "${WD}/${workdir}/iso/aui/persistent_${iso_label}" "${WD}/${workdir}/usb3/"
        cp -a "${WD}/${workdir}/iso/aui/persistent_${iso_label}" "${WD}/${workdir}/usb3/persistent_${iso_label}_original"
        cp "${WD}/${workdir}/iso/aui/AUIDATA" "${WD}/${workdir}/usb3/"
        if [[ -n "${encryption:-}" ]]; then
               _encrypt_setup
        else
               true
        fi
}

_finalize () {
        _unmount
        if [[ -n "${encryption:-}" ]]; then
               cryptsetup close auicrypt
        else
                true
        fi
}

_bootloader () {
        echo
        _msg_info "Installing boot loader"
        if ! syslinux --directory syslinux --install "${usbdevice}2" > /dev/null; then
                echo 'Bootloader installation failed!'
                exit 1
        fi
        if ! dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/gptmbr.bin of="${usbdevice}" 2> /dev/null; then
                echo 'Bootloader installation failed!'
                exit 1
        fi
        if ! sfdisk --part-attrs "${usbdevice}" 2 LegacyBIOSBootable > /dev/null; then
                echo 'Bootloader installation failed!'
                exit 1
        fi
}

# arguments
OPTS=$(getopt -o 'h' --long 'encrypt,ext4journal,f2fs,rawwrite,sizepart2:,sizepart3:,help' -n 'aui-mkusb' -- "$@")
[[ $? -eq 0 ]] || _usage 1
eval set -- "${OPTS}"
unset OPTS
[[ $# -eq 1 ]] && _usage 1

while true; do
        case "$1" in
                '-h'|'--help')
                        _help 0 ;;
                '--encrypt')
                        encryption=yes
                        shift ;;
                '--ext4journal')
                        ext4journal=yes
                        shift ;;
                '--f2fs')
                        f2fs=yes
                        shift ;;
                '--rawwrite')
                        rawwrite=yes
                        shift ;;
                '--sizepart2')
                        fatsize=$2
                        shift 2;;
                '--sizepart3')
                        cowsize=$2
                        shift 2;;
                '--')
                        shift
                        break ;;
        esac
done

_checks "$@"
_init
_confirm_write
if [[ -n "${rawwrite:-}" ]]; then
        _rawwrite
else
        _usb_prepare
        _partitions
        _format
        _mount
        _copy
        _persistence
        _finalize
        _bootloader
fi
echo
_msg_info "Done!"

# vim: set expandtab:
